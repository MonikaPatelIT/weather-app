{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","onSubmit","getWeather","type","name","placeholder","defaultValue","autofocus","Weather","description","city","country","temperature","error","API_KEY","App","state","undefined","humidity","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","this","api_call1","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAYeA,EAVF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACLH,EAAAC,EAAAC,cAAA,QAAME,SAAUL,EAAMM,YAClBL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAASC,aAAa,WAAWC,UAAU,SACtFV,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,SAASC,YAAY,WAAWC,aAAa,OACrET,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,sBCoBOK,EAzBC,SAAAZ,GAAK,OACTC,EAAAC,EAAAC,cAAA,WAGQH,EAAMa,aACNZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,IAAuCJ,EAAMa,aAE3Cb,EAAMc,MAAQd,EAAMe,SAAYd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBJ,EAAMc,KAArC,MAA8Cd,EAAMe,SAElFf,EAAMgB,aAAgBf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACnCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBJ,EAAMgB,YAA5C,KACAf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,MAKHJ,EAAMiB,OACPhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,WAAuCJ,EAAMiB,SChB3DC,EAAU,mCAgGDC,6MA5FbC,MAAQ,CACNJ,iBAAcK,EACdP,UAAMO,EACNN,aAASM,EACTC,cAAUD,EACVR,iBAAaQ,EACbJ,WAAOI,KAuBTf,iDAAa,SAAAiB,EAAOC,GAAP,IAAAV,EAAAC,EAAAU,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACGlB,EAAQU,EAAES,OAAOC,SAASpB,KAAKqB,MAC/BpB,EAAUS,EAAES,OAAOC,SAASpB,KAAKqB,MAH3BN,EAAAE,KAAA,EAKUK,MAAK,qDAAAC,OAAsDvB,EAAtD,KAAAuB,OAA8DtB,EAA9D,WAAAsB,OAA+EnB,EAA/E,kBALf,cAKPO,EALOI,EAAAS,KAAAT,EAAAE,KAAA,EAMKN,EAASc,OANd,OAMPb,EANOG,EAAAS,KAQZxB,GAAQC,EAEVyB,EAAKC,SAAS,CACXzB,YAAaU,EAAKgB,KAAKC,KACvB7B,KAAKY,EAAKlB,KACVO,QAAQW,EAAKkB,IAAI7B,QACjBO,SAAUI,EAAKgB,KAAKpB,SACpBT,YAAYa,EAAKmB,QAAQ,GAAGhC,YAC5BI,MAAO,KAKTuB,EAAKC,SAAS,CACZzB,iBAAaK,EACbP,UAAKO,EACLN,aAAQM,EACRC,cAASD,EACTR,iBAAYQ,EACZJ,MAAO,0BA3BI,yBAAAY,EAAAiB,SAAAvB,EAAAwB,wQAnBD,WACG,cAESX,MAAK,qDAAAC,OAHjB,WAGiB,KAAAA,OAFd,KAEc,WAAAA,OAA+EnB,EAA/E,gCAAvB8B,kBACYA,EAAUT,eAAtBb,WAGJqB,KAAKN,SAAS,CACZzB,YAAaU,EAAKgB,KAAKC,KACvB7B,KAAKY,EAAKlB,KACVO,QAAQW,EAAKkB,IAAI7B,QACjBO,SAAUI,EAAKgB,KAAKpB,SACpBT,YAAYa,EAAKmB,QAAQ,GAAGhC,YAC5BI,MAAO,wIAyCT,OACDhB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACTH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBACdH,EAAAC,EAAAC,cAAC8C,EAAD,CAAM3C,WAAcyC,KAAKzC,aACzBL,EAAAC,EAAAC,cAAC+C,EAAD,CAASpC,KAAMiC,KAAK3B,MAAMN,KAC9BC,QAASgC,KAAK3B,MAAML,QACpBC,YAAe+B,KAAK3B,MAAMJ,YAC1BM,SAAWyB,KAAK3B,MAAMJ,YACtBH,YAAakC,KAAK3B,MAAMP,YACxBI,MAAS8B,KAAK3B,MAAMH,qBA/EdkC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2cd2b6eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => (\r\n    <div><h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <form onSubmit={props.getWeather} >\r\n        <input type=\"text\" name=\"city\" placeholder=\"City..\" defaultValue=\"Auckland\" autofocus=\"true\" />\r\n        <input type=\"text\" name=\"contry\" placeholder=\"Contry..\" defaultValue=\"NZ\" />\r\n        <button type=\"submit\">Get the Weather</button>\r\n    </form>\r\n    </div>\r\n    );\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n            <div>\r\n                   \r\n                    {\r\n                    props.description &&  \r\n                    <h1 className=\"weather__description\"> {props.description}</h1>\r\n                    }\r\n                    { props.city && props.country &&  <h3 className=\"weather__area\">{props.city} , {props.country}</h3>}\r\n                    {\r\n                        props.temperature &&  <p className=\"temp\">\r\n                        <span className=\"weather__tempvalue\">{props.temperature} </span>\r\n                        <span className=\"weather__deg\">0</span>\r\n                        <span className=\"weather__temptype\">C</span>\r\n                    </p>\r\n                    }\r\n                 \r\n                    {\r\n                     props.error &&  \r\n                    <p className=\"weather__error\">Error : {props.error}</p>\r\n                    }\r\n            </div>\r\n          \r\n    \r\n);\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Form from './components/Form.js';\r\nimport Weather from './components/Weather.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst API_KEY = 'db7c25f991ce57c7dee255bcd98e4741';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temperature : undefined,\r\n    city :undefined,\r\n    country: undefined,\r\n    humidity :undefined,\r\n    description: undefined,\r\n    error: undefined \r\n  }\r\n  async componentDidMount() {\r\n    //default City and Country value to load data\r\n    let city ='Auckland';\r\n    let country= 'NZ';\r\n      \r\n  const api_call1 = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n  const data= await api_call1.json();\r\n  \r\n  if(data){\r\n    this.setState({\r\n      temperature: data.main.temp,\r\n      city:data.name,\r\n      country:data.sys.country,\r\n      humidity: data.main.humidity,\r\n      description:data.weather[0].description,\r\n      error: \"\"\r\n    });\r\n    \r\n  }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n   const city  = e.target.elements.city.value;\r\n   const country = e.target.elements.city.value;\r\n  \r\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n  const data= await api_call.json();\r\n  \r\nif(city && country){\r\n  \r\n\tthis.setState({\r\n    temperature: data.main.temp,\r\n    city:data.name,\r\n    country:data.sys.country,\r\n    humidity: data.main.humidity,\r\n    description:data.weather[0].description,\r\n    error: \"\"\r\n  });\r\n  \r\n}\r\nelse{\r\n  this.setState({\r\n    temperature: undefined,\r\n    city:undefined,\r\n    country:undefined,\r\n    humidity:undefined,\r\n    description:undefined,\r\n    error: \"Please enter the city\"\r\n  });\r\n  \r\n}\r\n\r\n  \r\n}\r\n  render() {\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"conatiner wrapper\">\r\n          <div className=\"row display-table\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"weather-container\"  >\r\n              <div className =\"content-container \">\r\n                <Form getWeather = {this.getWeather} />\r\n                <Weather city={this.state.city}\r\n\t\t\t\t        country={this.state.country}\r\n\t\t\t\t        temperature = {this.state.temperature}\r\n\t\t\t\t        humidity= {this.state.temperature}\r\n\t\t\t\t        description={this.state.description}\r\n\t\t\t\t        error = {this.state.error}\r\n\t\t\t\t        />\r\n              </div>\r\n              \r\n            </div> \r\n            </div>\r\n        \t</div>\r\n\t\t\t\t</div>\r\n      </div>\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}