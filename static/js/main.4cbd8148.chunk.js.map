{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Title","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cbd8148.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Title = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n    </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather} >\r\n        <input type=\"text\" name=\"city\" placeholder=\"City..\"/>\r\n        <input type=\"text\" name=\"contry\" placeholder=\"Contry..\"/>\r\n        <button>Get the Weather</button>\r\n    </form>\r\n    );\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div>\r\n        {\r\n            props.city && props.country && \r\n            <p className=\"weather__key\">Location: \r\n               <span className=\"weather__value\"> {props.city} , {props.country}</span>\r\n            </p> \r\n        }\r\n        {\r\n            props.temperature && \r\n            <p className=\"weather__key\">Temperature : \r\n            <span className=\"weather__value\">{props.temperature} </span>\r\n            </p>\r\n            }\r\n        {\r\n            props.humidity && \r\n            <p className=\"weather__key\">Humidity :\r\n            <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && \r\n            <p className=\"weather__key\">Condition : <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error &&  \r\n            <p className=\"weather__error\">Error : {props.error}</p>\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Title from './components/Title.js';\r\nimport Form from './components/Form.js';\r\nimport Weather from './components/Weather.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst API_KEY = 'db7c25f991ce57c7dee255bcd98e4741';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temperature : undefined,\r\n    city :undefined,\r\n    country: undefined,\r\n    humidity :undefined,\r\n    description: undefined,\r\n    error: undefined \r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.city.value;\r\n\r\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n  const data= await api_call.json();\r\n  \r\nif(city && country){\r\n  console.log( data);\r\n\tthis.setState({\r\n    temperature: data.main.temp,\r\n    city:data.name,\r\n    country:data.sys.country,\r\n    humidity: data.main.humidity,\r\n    description:data.weather[0].description,\r\n    error: \"\"\r\n  });\r\n  \r\n}\r\nelse{\r\n  this.setState({\r\n    temperature: undefined,\r\n    city:undefined,\r\n    country:undefined,\r\n    humidity:undefined,\r\n    description:undefined,\r\n    error: \"Please enter the city\"\r\n  });\r\n  \r\n}\r\n\r\n  \r\n}\r\n  render() {\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t\r\n            <div className=\"conatiner wrapper\">\r\n            <div className=\"row display-table\">\r\n            <div className=\"col-md-5 col-lg-5 col-sm-12 title-container\" >\r\n                 <Title/> \r\n                 \r\n              </div>\r\n              <div className=\"col-md-5 col-lg-5 col-sm-12 form-container\"> \r\n              \r\n                <Form getWeather = {this.getWeather} />\r\n\t\t\t\t        <Weather city={this.state.city}\r\n\t\t\t\t        country={this.state.country}\r\n\t\t\t\t        temperature = {this.state.temperature}\r\n\t\t\t\t        humidity= {this.state.temperature}\r\n\t\t\t\t        description={this.state.description}\r\n\t\t\t\t        error = {this.state.error}\r\n\t\t\t\t        />\r\n              </div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n            </div>\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}